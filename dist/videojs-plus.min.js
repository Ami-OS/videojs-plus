/* eslint-disable */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('video.js')) :
  typeof define === 'function' && define.amd ? define(['video.js'], factory) :
  (factory(global.videojs));
}(this, (function (videojs) { 'use strict';

  var videojs__default = 'default' in videojs ? videojs['default'] : videojs;

  function playerHandler (vjsPlayer) {
    vjsPlayer.playsinline(true);
    vjsPlayer.addClass("video-js");

    if (videojs.browser.IS_IPHONE) {
      vjsPlayer.addClass("vjs-is-iphone");

      if (videojs.browser.IOS_VERSION < 11) {
        vjsPlayer.addClass("vjs-iphone-below-11");
      } else {
        vjsPlayer.addClass("vjs-iphone-11");
      }
    }

    videojs.browser.TOUCH_ENABLED && vjsPlayer.removeClass("vjs-workinghover");
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var Component = videojs.getComponent("Component");
  var ControlBar = videojs.getComponent("ControlBar");

  var ControlSeparator =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(ControlSeparator, _Component);

    function ControlSeparator(player, options) {
      var _this;

      _this = _Component.call(this, player, options) || this;

      _this.addClass("vjs-control-separator");

      _this.addClass(options.className || "");

      return _this;
    }

    return ControlSeparator;
  }(Component);

  videojs.registerComponent("ControlSeparator", ControlSeparator);
  videojs.hook("beforesetup", function (_, options) {
    var children = ControlBar.prototype.options_.children.slice(0);
    var index = children.indexOf("CustomControlSpacer") + 1;

    if (index > 0) {
      ControlBar.prototype.options_.children = [{
        name: "ControlSeparator",
        className: "top",
        children: []
      }, {
        name: "ControlSeparator",
        className: "middle",
        children: children.splice(0, index)
      }, {
        name: "ControlSeparator",
        className: "bottom",
        children: children
      }];
    }

    return options;
  }); // prevent control bar immediately shown

  videojs.hook("setup", function (vjsPlayer) {
    var matchDimension = function matchDimension(value) {
      return window.matchMedia ? window.matchMedia("(max-width: " + value + "px)").matches : window.innerWidth <= value;
    };

    if (matchDimension(480)) {
      // Prevent control bar shown immediately after playing
      vjsPlayer.controlBar.hide();
      vjsPlayer.one("playing", function () {
        // Show control bar after `userinactive` (depends on `inactivityTimeout`) or user action
        var events = ["mouseover", "userinactive", "touchstart"];
        vjsPlayer.one(events, function callback() {
          vjsPlayer.off(events, callback);
          vjsPlayer.controlBar.show();
        }); // If player do not autoplay start, the first click to play action cause player inactive ( maybe a bug of videojs )
        // Then clcik on the player before `inactivityTimeout`, the control bar will no shown as the player still inactive
        // So we need to make sure player is active after second click

        vjsPlayer.one("touchend", function () {
          vjsPlayer.userActive(true);
        });
      });
      vjsPlayer.addClass("vjs-tiny");
    }
  });

  var SeekBar = videojs.getComponent("SeekBar");

  SeekBar.prototype.getPercent = function getPercent() {
    var time = this.player_.currentTime();
    var percent = time / this.player_.duration();
    return percent >= 1 ? 1 : percent;
  };

  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
    var player = this.player_; // if (!dom.isSingleLeftClick(event) || isAdPlaying(player)) {

    if (!videojs.dom.isSingleLeftClick(event)) {
      return;
    }

    var newTime = this.calculateDistance(event) * player.duration();

    if (newTime === player.duration()) {
      newTime = newTime - 0.1;
    }

    player.currentTime(newTime);
    this.update();
  };

  videojs.getComponent("ControlBar").prototype.options_.children = ["PlayToggle", "CustomControlSpacer", "VolumePanel", "CurrentTimeDisplay", "TimeDivider", "DurationDisplay", "ProgressControl", "CustomControlSpacer", "SettingMenuButton", "FullscreenToggle"];

  function handler(vjsPlayer, options) {
    vjsPlayer.on("mouseleave", function () {
      vjsPlayer.userActive(false);
    });
    vjsPlayer.ready(function () {
      vjsPlayer.controls(options.controls !== false);
    });
  }

  function findChild(parent, name, result) {
    var children = [];

    if (parent && parent.childIndex_ && Object.keys(parent.childIndex_).length) {
      for (var componentId in parent.childIndex_) {
        var component = parent.childIndex_[componentId];

        if (component && component.name_ == name) {
          var _result$push;

          result.push((_result$push = {
            parent: parent,
            component: component,
            index: parent.children_.indexOf(component)
          }, _result$push[name] = component, _result$push));
        }

        children.push(findChild(component, name, result));
      }
    }

    return {
      name: name,
      parent: parent,
      children: children
    };
  }

  videojs.getComponent("Component").prototype.findChild = function (name) {
    var result = [];
    findChild(this, name, result);
    return result;
  };

  var Title =
  /*#__PURE__*/
  function (_getComponent) {
    _inheritsLoose(Title, _getComponent);

    function Title(player, options) {
      var _this;

      _this = _getComponent.call(this, player, options) || this;
      _this.title_ = options.playerOptions.title || "";

      _this.update(_this.title_);

      return _this;
    }

    var _proto = Title.prototype;

    _proto.createEl = function createEl() {
      var el = _getComponent.prototype.createEl.call(this, "div", {
        className: "vjs-title"
      });

      this.contentEl_ = videojs.dom.createEl("div", {
        className: "vjs-title-field"
      });
      el.appendChild(this.contentEl_);
      return el;
    };

    _proto.update = function update(title_) {
      if (!title_) {
        this.hide();
      } else {
        this.show();
      }

      this.player_.cache_.title = this.title_;
      this.title_ = title_;
      this.contentEl_.innerHTML = title_;
    };

    return Title;
  }(videojs.getComponent("Component"));

  var title = function title(title_) {
    var videoTitle = this.player_.getChild("VideoTitle");

    if (typeof title_ === "undefined") {
      return videoTitle.title_;
    }

    videoTitle.update(title_);
  };

  videojs.registerPlugin("title", title);
  videojs.registerComponent("VideoTitle", Title);
  videojs.getComponent("Player").prototype.options_.children.splice(2, 0, "VideoTitle");

  var PlayToggleButton = videojs.getComponent("PlayToggle");
  var ClickableComponent = videojs.getComponent("ClickableComponent");

  var PlayToggleLayer =
  /*#__PURE__*/
  function (_ClickableComponent) {
    _inheritsLoose(PlayToggleLayer, _ClickableComponent);

    function PlayToggleLayer(player, options) {
      return _ClickableComponent.call(this, player, options) || this; // this.on("click", this.handleClick.bind(this));
    }

    var _proto = PlayToggleLayer.prototype;

    _proto.createEl = function createEl() {
      return videojs.dom.createEl("div", {
        className: "vjs-play-toggle-layer"
      });
    };

    _proto.handleClick = function handleClick(evt) {
      if (this.player_.userActive() || this.player_.paused()) {
        PlayToggleButton.prototype.handleClick.call(this, evt);
      }
    };

    return PlayToggleLayer;
  }(ClickableComponent);

  videojs.registerComponent("PlayToggleLayer", PlayToggleLayer);
  var playerChildren = videojs.getComponent("Player").prototype.options_.children;
  var loadSpinnerIndex = playerChildren.indexOf("loadingSpinner");
  playerChildren.splice(loadSpinnerIndex, 0, "PlayToggleLayer");

  var MenuItem = videojs.getComponent("MenuItem");

  var ContextMenuItem =
  /*#__PURE__*/
  function (_MenuItem) {
    _inheritsLoose(ContextMenuItem, _MenuItem);

    function ContextMenuItem(player, options) {
      var _this;

      _this = _MenuItem.call(this, player, _extends({}, options, {
        selectable: true
      })) || this;

      _this.addClass("vjs-context-menu-item");

      _this.controlText(options.label);

      return _this;
    }

    var _proto = ContextMenuItem.prototype;

    _proto.createEl = function createEl() {
      var _MenuItem$prototype$c;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var el = (_MenuItem$prototype$c = _MenuItem.prototype.createEl).call.apply(_MenuItem$prototype$c, [this].concat(args));

      el.insertAdjacentHTML("afterbegin", "<span aria-hidden=\"true\" class=\"vjs-icon-placeholder " + (this.options_.icon || "") + "\"></span>");
      return el;
    };

    _proto.handleClick = function handleClick() {
      var ContextMenu = this.player_.findChild("ContextMenu")[0].component;
      ContextMenu.hide();
    };

    return ContextMenuItem;
  }(MenuItem);

  videojs.registerComponent("ContextMenuItem", ContextMenuItem);

  var ContextMenuToggleLoop =
  /*#__PURE__*/
  function (_ContextMenuItem) {
    _inheritsLoose(ContextMenuToggleLoop, _ContextMenuItem);

    function ContextMenuToggleLoop(player) {
      var _this;

      _this = _ContextMenuItem.call(this, player, {
        name: "ContextMenuToggleLoop",
        label: "Loop",
        icon: "vjs-icon-loop"
      }) || this;

      _this.addClass("vjs-checkbox");

      player.on("loadstart", _this.update.bind(_assertThisInitialized(_assertThisInitialized(_this))));
      return _this;
    }

    var _proto = ContextMenuToggleLoop.prototype;

    _proto.update = function update() {
      this.selected(this.player_.loop());
    };

    _proto.handleClick = function handleClick() {
      _ContextMenuItem.prototype.handleClick.call(this);

      this.player_.loop(!this.player_.loop());
      this.update();
    };

    return ContextMenuToggleLoop;
  }(ContextMenuItem);

  videojs.registerComponent("ContextMenuToggleLoop", ContextMenuToggleLoop);

  var AboutThisPlayer =
  /*#__PURE__*/
  function (_ContextMenuItem) {
    _inheritsLoose(AboutThisPlayer, _ContextMenuItem);

    function AboutThisPlayer(player) {
      return _ContextMenuItem.call(this, player, {
        name: "AboutThisPlayer",
        label: "About This Player",
        icon: "vjs-icon-github"
      }) || this;
    }

    var _proto = AboutThisPlayer.prototype;

    _proto.handleClick = function handleClick() {
      _ContextMenuItem.prototype.handleClick.call(this);

      window.open("https://github.com/Pong420/videojs-plus", "_blank");
    };

    return AboutThisPlayer;
  }(ContextMenuItem);

  videojs.registerComponent("AboutThisPlayer", AboutThisPlayer);

  var ClickableComponent$1 = videojs.getComponent("ClickableComponent");

  var CloseContextMenu =
  /*#__PURE__*/
  function (_ClickableComponent) {
    _inheritsLoose(CloseContextMenu, _ClickableComponent);

    function CloseContextMenu() {
      return _ClickableComponent.apply(this, arguments) || this;
    }

    var _proto = CloseContextMenu.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-close-menu-layer vjs-close-context-menu";
    };

    _proto.handleClick = function handleClick() {
      this.options_.menu.hide();
    };

    return CloseContextMenu;
  }(ClickableComponent$1);

  videojs.registerComponent("CloseContextMenu", CloseContextMenu);

  var Menu = videojs.getComponent("Menu");

  var ContextMenu =
  /*#__PURE__*/
  function (_Menu) {
    _inheritsLoose(ContextMenu, _Menu);

    function ContextMenu(player, options) {
      var _this;

      _this = _Menu.call(this, player, options) || this;

      _this.addClass("vjs-context-menu");

      _this.hide();

      _this.player_.on("contextmenu", _this.onContextmenu.bind(_assertThisInitialized(_assertThisInitialized(_this))));

      var handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));

      window.addEventListener("click", handleClick);

      _this.on("dispose", function () {
        window.removeEventListener("click", handleClick);
      });

      return _this;
    }

    var _proto = ContextMenu.prototype;

    _proto.createEl = function createEl() {
      var _Menu$prototype$creat;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var el = (_Menu$prototype$creat = _Menu.prototype.createEl).call.apply(_Menu$prototype$creat, [this].concat(args));

      var layer = new CloseContextMenu(this.player_, {
        menu: this
      });
      el.insertBefore(layer.el_, el.firstElementChild);
      return el;
    };

    _proto.show = function show(x, y) {
      _Menu.prototype.show.call(this);

      this.el_.style.top = y + "px";
      this.el_.style.left = x + "px";
    };

    _proto.onContextmenu = function onContextmenu(evt) {
      evt.preventDefault();
      var rect = this.player_.el().getBoundingClientRect();
      var x = evt.pageX - rect.x;
      var y = evt.pageY - rect.y;
      this.show(x, y);
    };

    _proto.handleClick = function handleClick(evt) {
      if (evt.button || evt.button === 0) {
        if (evt.button !== 2) {
          this.hide();
        }
      }
    };

    return ContextMenu;
  }(Menu);

  ContextMenu.prototype.options_ = {
    children: ["ContextMenuToggleLoop", "AboutThisPlayer"]
  };
  videojs.registerComponent("ContextMenu", ContextMenu);
  videojs.getComponent("Player").prototype.options_.children.push("ContextMenu");

  var ClickableComponent$2 = videojs.getComponent("ClickableComponent");

  var CloseSettingMenu =
  /*#__PURE__*/
  function (_ClickableComponent) {
    _inheritsLoose(CloseSettingMenu, _ClickableComponent);

    function CloseSettingMenu() {
      return _ClickableComponent.apply(this, arguments) || this;
    }

    var _proto = CloseSettingMenu.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-close-menu-layer vjs-close-setting-menu";
    };

    _proto.handleClick = function handleClick() {
      this.options_.menu.menuButton_.hideMenu();
    };

    return CloseSettingMenu;
  }(ClickableComponent$2);

  videojs.registerComponent("CloseSettingMenu", CloseSettingMenu);

  var Menu$1 = videojs.getComponent("Menu");

  var SettingMenu =
  /*#__PURE__*/
  function (_Menu) {
    _inheritsLoose(SettingMenu, _Menu);

    function SettingMenu(player, options) {
      var _this;

      _this = _Menu.call(this, player, _extends({}, options, {
        name: "SettingMenu"
      })) || this;

      if (!player.SettingMenu) {
        player.SettingMenu = _assertThisInitialized(_assertThisInitialized(_this));
      }

      _this.addClass("vjs-setting-menu");

      setTimeout(_this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this))), 0);
      return _this;
    }

    var _proto = SettingMenu.prototype;

    _proto.reset = function reset() {
      if (!this.contentEl_) {
        return;
      }

      this.removeStyle();
      var _this$contentEl_ = this.contentEl_,
          width = _this$contentEl_.offsetWidth,
          height = _this$contentEl_.offsetHeight;
      this.origin = {
        children: this.children().slice(0),
        width: width,
        height: height
      };
      this.resize({
        width: width,
        height: height
      });
      /**
       *  Since the width of setting menu depends on screen width.
       *  If player is initialized on small screen size then resize to a bigger screen,
       *  the width of setting menu will be too wide as the origin width is affected by css,
       *  A class `vjs-setting-menu-ready` as a condition for css on small screen,
       *  therefore the origin width will not be affected.
       */

      this.addClass("vjs-setting-menu-ready");
    };

    _proto.createEl = function createEl() {
      var el = _Menu.prototype.createEl.call(this);

      var layer = new CloseSettingMenu(this.player_, {
        menu: this
      });
      el.insertBefore(layer.el_, el.firstElementChild);
      return el;
    };

    _proto.update = function update(children) {
      if (children === void 0) {
        children = [];
      }

      var children_ = this.children().slice(0);
      children_.forEach(this.removeChild.bind(this));
      children.forEach(this.addChild.bind(this));
    };

    _proto.resize = function resize(_ref) {
      var width = _ref.width,
          height = _ref.height;
      this.contentEl_.style.width = width + "px";
      this.contentEl_.style.height = height + "px";
    };

    _proto.restore = function restore() {
      this.resize(this.origin);
      this.update(this.origin.children);
    };

    _proto.removeStyle = function removeStyle() {
      this.contentEl_.removeAttribute("style");
    };

    return SettingMenu;
  }(Menu$1);

  videojs.registerComponent("SettingMenu", SettingMenu);

  var MenuItem$1 = videojs.getComponent("MenuItem");

  var SettingItem =
  /*#__PURE__*/
  function (_MenuItem) {
    _inheritsLoose(SettingItem, _MenuItem);

    function SettingItem(player, options) {
      var _this;

      options = options || {
        selectable: false
      };
      _this = _MenuItem.call(this, player, options) || this;
      _this.menu = options.menu || player.SettingMenu;
      return _this;
    }

    return SettingItem;
  }(MenuItem$1);

  videojs.registerComponent("SettingItem", SettingItem);

  var SettingSubMenuTitle =
  /*#__PURE__*/
  function (_SettingItem) {
    _inheritsLoose(SettingSubMenuTitle, _SettingItem);

    function SettingSubMenuTitle(player, options) {
      var _this;

      _this = _SettingItem.call(this, player, options) || this;

      _this.addChild("Component", {}, 0);

      _this.addClass("vjs-settings-sub-menu-item");

      _this.addClass("vjs-settings-sub-menu-title");

      return _this;
    }

    var _proto = SettingSubMenuTitle.prototype;

    _proto.handleClick = function handleClick() {
      this.options_.menu.restore();
    };

    return SettingSubMenuTitle;
  }(SettingItem);

  videojs.registerComponent("SettingSubMenuTitle", SettingSubMenuTitle);

  var SettingSubMenuItem =
  /*#__PURE__*/
  function (_SettingItem) {
    _inheritsLoose(SettingSubMenuItem, _SettingItem);

    function SettingSubMenuItem(player, options) {
      var _this;

      _this = _SettingItem.call(this, player, options) || this;
      _this.selectable = true;
      Object.assign(_assertThisInitialized(_assertThisInitialized(_this)), options);

      _this.addChild("Component", {}, 0);

      _this.addClass("vjs-settings-sub-menu-item");

      _this.addClass("vjs-settings-sub-menu-option");

      _this.update();

      return _this;
    }

    var _proto = SettingSubMenuItem.prototype;

    _proto.update = function update() {
      this.selected(this.value === this.parent.currentValue.value);
    };

    _proto.handleClick = function handleClick() {
      this.parent.update(this);
    };

    return SettingSubMenuItem;
  }(SettingItem);

  videojs.registerComponent("SettingSubMenuItem", SettingSubMenuItem);

  var SettingMenu$1 = videojs.getComponent("SettingMenu");

  var SettingMenuTemp =
  /*#__PURE__*/
  function (_SettingMenu) {
    _inheritsLoose(SettingMenuTemp, _SettingMenu);

    function SettingMenuTemp(player) {
      return _SettingMenu.call(this, player, {
        name: "SettingMenuTemp"
      }) || this;
    }

    return SettingMenuTemp;
  }(SettingMenu$1);

  var getMenuDimension = function getMenuDimension(player, items) {
    var tempMenu = new SettingMenuTemp(player);
    tempMenu.update(items);
    player.addChild(tempMenu);
    var rect = tempMenu.contentEl_.getBoundingClientRect(); // remove subMenuItem form tempMenu first, otherwise they will also be disposed

    tempMenu.update();
    tempMenu.dispose(); // remove tempMenu in `player.children`

    player.removeChild(tempMenu);
    return rect;
  };

  function parseEntries(entries) {
    var currentValue;
    entries = entries.map(function (data) {
      var isDefault = typeof data.defalut !== "undefined" ? data.defalut : false;
      var entry = {
        label: typeof data.label !== "undefined" ? data.label : data,
        value: typeof data.value !== "undefined" ? data.value : data,
        defalut: isDefault
      };

      if (isDefault) {
        currentValue = entry;
      }

      return entry;
    });

    if (!currentValue) {
      currentValue = entries[0];
    }

    return {
      entries: entries,
      currentValue: currentValue
    };
  }

  var SettingMenuItem =
  /*#__PURE__*/
  function (_SettingItem) {
    _inheritsLoose(SettingMenuItem, _SettingItem);

    function SettingMenuItem(player, options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _SettingItem.call(this, player, Object.assign(options, parseEntries(options.entries))) || this;

      _this.setEntries(_this.options_.entries);

      return _this;
    }

    var _proto = SettingMenuItem.prototype;

    _proto.createEl = function createEl() {
      var _this$options_ = this.options_,
          icon = _this$options_.icon,
          label = _this$options_.label,
          currentValue = _this$options_.currentValue;
      var el = videojs.dom.createEl("li", {
        className: "vjs-menu-item vjs-setting-menu-item",
        innerHTML: "\n        <div class=\"vjs-icon-placeholder " + (icon || "") + "\"></div>\n        <div class=\"vjs-setting-menu-label\">" + this.localize(label) + "</div>\n        <div class=\"vjs-spacer\"></div>\n      "
      });
      this.settingMenuItemValue = videojs.dom.createEl("div", {
        className: "vjs-setting-menu-value",
        innerHTML: this.localize(currentValue ? currentValue.label : "")
      });
      el.appendChild(this.settingMenuItemValue);
      return el;
    };

    _proto.setEntries = function setEntries(entries_) {
      var _this2 = this;

      var _parseEntries = parseEntries(entries_),
          entries = _parseEntries.entries,
          currentValue = _parseEntries.currentValue;

      this.entries = entries;
      this.currentValue = currentValue;

      if (currentValue) {
        this.settingMenuItemValue.innerHTML = this.localize(currentValue.label);
      }

      this.subMenuItems = this.entries.map(function (_ref) {
        var label = _ref.label,
            value = _ref.value;
        return new SettingSubMenuItem(_this2.player_, {
          label: label,
          value: value,
          parent: _this2,
          menu: _this2.menu
        });
      });
      this.subMenuItems.splice(0, 0, new SettingSubMenuTitle(this.player_, {
        label: this.options_.label,
        menu: this.menu
      }));
    };

    _proto.handleClick = function handleClick() {
      var dimensions = getMenuDimension(this.player_, this.subMenuItems);
      this.menu.update(this.subMenuItems);
      this.menu.resize(dimensions);
    };

    _proto.update = function update(_ref2) {
      var label = _ref2.label,
          value = _ref2.value;
      this.currentValue = {
        label: label,
        value: value
      };
      this.settingMenuItemValue.innerHTML = label;
      this.subMenuItems.forEach(function (item) {
        item.update && item.update();
      }); // this.menu.menuButton_.unpressButton()

      this.menu.restore();
    };

    _proto.show = function show() {
      _SettingItem.prototype.show.call(this);

      this.menu.reset();
    };

    return SettingMenuItem;
  }(SettingItem);

  videojs.registerComponent("SettingMenuItem", SettingMenuItem);

  var SettingOnOffItem =
  /*#__PURE__*/
  function (_SettingItem) {
    _inheritsLoose(SettingOnOffItem, _SettingItem);

    function SettingOnOffItem() {
      return _SettingItem.apply(this, arguments) || this;
    }

    var _proto = SettingOnOffItem.prototype;

    _proto.createEl = function createEl() {
      var options = this.options_;
      var el = videojs.dom.createEl("li", {
        className: "vjs-menu-item vjs-setting-onoff-item",
        innerHTML: "\n        <div class=\"vjs-icon-placeholder " + (this.options_.icon || "") + "\"></div>\n        <div>" + this.localize(options.label) + "</div>\n        <div class=\"vjs-spacer\"></div>\n        <div>\n          <div class=\"vjs-onoff-button\"></div>\n        </div>\n      "
      });
      return el;
    };

    _proto.update = function update(active) {
      this.active = typeof active === "undefined" ? !this.active : active;

      if (this.active) {
        this.addClass("vjs-active");
      } else {
        this.removeClass("vjs-active");
      }
    };

    _proto.handleClick = function handleClick() {
      this.update();
    };

    _proto.selected = function selected() {};

    return SettingOnOffItem;
  }(SettingItem);

  videojs.registerComponent("SettingOnOffItem", SettingOnOffItem);

  var PlaybackRateSettingMenuItem =
  /*#__PURE__*/
  function (_SettingMenuItem) {
    _inheritsLoose(PlaybackRateSettingMenuItem, _SettingMenuItem);

    function PlaybackRateSettingMenuItem(player, options) {
      var _this2;

      _this2 = _SettingMenuItem.call(this, player, Object.assign(options, {
        label: "Speed",
        icon: "vjs-icon-slow-motion-video",
        entries: [0.5, 0.75, {
          label: "Normal",
          value: 1,
          defalut: true
        }, 1.25, 1.5, 2]
      })) || this;

      _this2.addClass("vjs-setting-playback-rate");

      _this2.ratechangeBySettingMenu = false;

      var _this = _assertThisInitialized(_assertThisInitialized(_this2));

      var entries = _this2.entries;
      player.on("ratechange", function () {
        if (!_this.ratechangeBySettingMenu) {
          var rate = player.playbackRate();
          var currentValue = entries.filter(function (value) {
            return rate === value;
          })[0] || entries[2];

          _this.update(currentValue);
        }

        _this.ratechangeBySettingMenu = false;
      });
      return _this2;
    }

    var _proto = PlaybackRateSettingMenuItem.prototype;

    _proto.handleClick = function handleClick() {
      this.ratechangeBySettingMenu = true;

      _SettingMenuItem.prototype.handleClick.call(this);
    };

    _proto.update = function update(selectedItem) {
      _SettingMenuItem.prototype.update.call(this, selectedItem);

      this.player_.playbackRate(selectedItem.value);
    };

    return PlaybackRateSettingMenuItem;
  }(SettingMenuItem);

  videojs.registerComponent("PlaybackRateSettingMenuItem", PlaybackRateSettingMenuItem);

  var MenuButton = videojs.getComponent("MenuButton");

  var SettingMenuButton =
  /*#__PURE__*/
  function (_MenuButton) {
    _inheritsLoose(SettingMenuButton, _MenuButton);

    function SettingMenuButton(player, options) {
      var _this;

      _this = _MenuButton.call(this, player, options) || this; // move menu to player

      player.addChild(_this.menu); // remove videojs parent child relationship between button and menu

      _this.removeChild(_this.menu);

      player.on("playerresize", function () {
        _this.menu.reset();
      });
      return _this;
    }

    var _proto = SettingMenuButton.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-setting-button " + _MenuButton.prototype.buildCSSClass.call(this);
    };

    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-setting-button " + _MenuButton.prototype.buildWrapperCSSClass.call(this);
    };

    _proto.createMenu = function createMenu() {
      var menu = new SettingMenu(this.player_, {
        menuButton: this
      });
      var entries = this.options_.entries || [];
      entries.forEach(function (component) {
        menu.addChild(component);
      });
      return menu;
    };

    _proto.hideMenu = function hideMenu() {
      this.unpressButton();
      this.el_.blur();
    };

    _proto.unpressButton = function unpressButton() {
      _MenuButton.prototype.unpressButton.call(this);

      this.player_.removeClass("vjs-keep-control-showing");
      this.menu.restore();
    };

    _proto.handleClick = function handleClick() {
      var _this2 = this;

      this.player_.addClass("vjs-keep-control-showing");

      if (this.buttonPressed_) {
        this.unpressButton();
      } else {
        this.pressButton();
      }

      this.off(document.body, "click", this.hideMenu);
      this.off(document.body, "touchend", this.hideMenu);
      setTimeout(function () {
        _this2.one(document.body, "click", _this2.hideMenu); // _this.buttonPressed_ && _this.one(document.body, 'touchend', _this.hideMenu);

      }, 0);
    };

    return SettingMenuButton;
  }(MenuButton);

  SettingMenuButton.prototype.controlText_ = "Settings";
  SettingMenuButton.prototype.options_ = {
    entries: ["PlaybackRateSettingMenuItem"]
  };
  videojs.registerComponent("SettingMenuButton", SettingMenuButton);

  videojs__default.hook("setup", function (vjsPlayer) {
    var options = vjsPlayer.options_;
    playerHandler(vjsPlayer, options);
    handler(vjsPlayer, options);
  });

})));
