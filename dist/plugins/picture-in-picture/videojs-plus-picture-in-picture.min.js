/* eslint-disable */
(function (video_js) {
  'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var Button = video_js.getComponent("Button");

  var PipButton =
  /*#__PURE__*/
  function (_Button) {
    _inheritsLoose(PipButton, _Button);

    function PipButton(player, options) {
      var _this;

      _this = _Button.call(this, player, options) || this;
      _this.el_.querySelector(".vjs-icon-placeholder").className += " vjs-icon-picture-in-picture";
      return _this;
    }

    var _proto = PipButton.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-pip-button " + _Button.prototype.buildCSSClass.call(this);
    };

    _proto.handleClick = function handleClick() {
      var _Button$prototype$han;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_Button$prototype$han = _Button.prototype.handleClick).call.apply(_Button$prototype$han, [this].concat(args));

      this.player_.pictureInPicture().toggle();
    };

    return PipButton;
  }(Button);

  PipButton.prototype.controlText_ = "Picture in Picture";
  video_js.registerComponent("PipButton", PipButton);
  video_js.hook("setup", function (vjsPlayer) {
    var _vjsPlayer$findChild$ = vjsPlayer.findChild("SettingMenuButton")[0],
        parent = _vjsPlayer$findChild$.parent,
        index = _vjsPlayer$findChild$.index;
    parent.addChild(new PipButton(vjsPlayer), {}, index);
  });

  var Component = video_js.getComponent("Component");

  var PipPlayerWrapper =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(PipPlayerWrapper, _Component);

    function PipPlayerWrapper(player, options) {
      var _this;

      _this = _Component.call(this, player, options) || this;

      _this.el_.appendChild(player.el());

      if (!options.wrapper) {
        _this.addClass("vjs-pip-player-wrapper");

        document.body.appendChild(_this.el_);
      }

      return _this;
    }

    var _proto = PipPlayerWrapper.prototype;

    _proto.createEl = function createEl() {
      if (this.options_.wrapper) {
        return this.options_.wrapper;
      }

      return _Component.prototype.createEl.call(this);
    };

    return PipPlayerWrapper;
  }(Component);

  video_js.registerComponent("PipPlayerWrapper", PipPlayerWrapper);

  var Plugin = video_js.getPlugin("plugin");

  var pictureInPicture =
  /*#__PURE__*/
  function (_Plugin) {
    _inheritsLoose(pictureInPicture, _Plugin);

    function pictureInPicture(player, options) {
      var _this2;

      if (options === void 0) {
        options = {};
      }

      _this2 = _Plugin.call(this, player, options) || this;
      console.log("HI");
      _this2.cache_ = {};
      _this2.pipPlayer = null;
      _this2.options_ = options;
      return _this2;
    }

    var _proto = pictureInPicture.prototype;

    _proto.toggle = function toggle() {
      if (this.pipPlayer) {
        this.dispose();
      } else {
        this.init();
      }
    };

    _proto.init = function init() {
      if (!this.pipPlayer) {
        this.handleOriginPlayer();
        this.createPipPlayer();
      }
    };

    _proto.createPipPlayer = function createPipPlayer() {
      var player = this.player,
          options_ = this.options_;
      var id = player.id_ + "-pip-player";
      var videoEl = video_js.dom.createEl("video", {
        id: id,
        className: "vjs-pip-player"
      });
      document.body.appendChild(videoEl);
      var playerOptions = Object.assign(player.options_, {
        autoplay: true,
        muted: player.muted()
      });
      var pipPlayer = this.pipPlayer = videojs(videoEl, playerOptions);
      console.log(this.pipPlayer);
      this.wrapper = new PipPlayerWrapper(pipPlayer, options_);
      this.dragzone = pipPlayer.getChild("PlayToggleLayer");
      this.updatePosition(Object.assign({}, this.cache_, options_));
      pipPlayer.ready(function () {
        pipPlayer.currentTime(player.currentTime());
        pipPlayer.play();
      });

      if (options_.draggable !== false) {
        this.draggable(this.dragzone.el_);
      }
    };

    _proto.handleOriginPlayer = function handleOriginPlayer() {
      var _this3 = this;

      var player = this.player;
      player.pause();
      player.hasStarted(false);
      player.controls(false);
      player.addClass("vjs-pip-player-enabled");
      player.one("play", function () {
        _this3.dispose();

        _this3.wrapper.dispose();
      });
    };

    _proto.dispose = function dispose() {
      var player = this.player,
          pipPlayer = this.pipPlayer;

      if (pipPlayer) {
        player.controls(true);
        player.removeClass("vjs-pip-player-enabled");
        player.paused() && player.play();
        !pipPlayer.ended() && player.currentTime(pipPlayer.currentTime());
        pipPlayer.dispose();
        this.pipPlayer = null;
      }
    };

    _proto.updatePosition = function updatePosition(_ref) {
      var x = _ref.x,
          y = _ref.y;

      if (typeof x !== "undefined" && typeof y !== "undefined") {
        this.wrapper.el_.style.bottom = y + "px";
        this.wrapper.el_.style.left = x + "px";
      }
    };

    _proto.draggable = function draggable(el) {
      var _this4 = this;

      var x, y;

      var _this = this;

      var move = function move(evt) {
        evt.preventDefault();
        _this4.cache_.x = Math.max(0, Math.min(window.innerWidth - el.offsetWidth, evt.clientX - x));
        _this4.cache_.y = Math.max(0, Math.min(window.innerHeight - el.offsetHeight, window.innerHeight - evt.clientY - el.offsetHeight + y));

        _this4.updatePosition(_this4.cache_);
      };

      el.addEventListener("mousedown", function (evt) {
        evt.preventDefault();
        x = evt.offsetX;
        y = evt.offsetY;

        var disableClick = function disableClick() {
          window.removeEventListener("mousemove", disableClick);

          _this.dragzone.disable();
        };

        window.addEventListener("mousemove", move);
        window.addEventListener("mousemove", disableClick);
        window.addEventListener("mouseup", function mouseup(evt) {
          window.removeEventListener("mouseup", mouseup);
          window.removeEventListener("mousemove", move);
          window.removeEventListener("mousemove", disableClick);
          setTimeout(function () {
            _this.dragzone.enable();
          }, 0);
        });
      });

      var onResize = function onResize() {
        var _this4$cache_ = _this4.cache_,
            x = _this4$cache_.x,
            y = _this4$cache_.y;

        _this4.updatePosition({
          x: Math.min(x, window.innerWidth - el.offsetWidth),
          y: Math.min(y, window.innerHeight - el.offsetHeight)
        });
      };

      window.addEventListener("resize", onResize);
      this.pipPlayer.on("dispose", function () {
        window.removeEventListener("resize", onResize);
      });
    };

    return pictureInPicture;
  }(Plugin);

  video_js.registerPlugin("pictureInPicture", pictureInPicture);

}(videojs));
