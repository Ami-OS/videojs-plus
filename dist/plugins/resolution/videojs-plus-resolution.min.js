/* eslint-disable */
(function (video_js) {
  'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var List =
  /*#__PURE__*/
  function () {
    function List(array, startIndex) {
      this.values = array.slice(0);
      this.index_ = startIndex || 0;
      this.loop_ = true;
    }

    var _proto = List.prototype;

    _proto.index = function index(value) {
      if (typeof value !== "undefined") {
        this.index_ = Math.max(0, Math.min(value, this.values.length - 1));
      } else {
        return this.index_;
      }
    };

    _proto.loop = function loop(value) {
      if (typeof value !== "undefined") {
        this.loop_ = !!value;
      } else {
        return this.loop_;
      }
    };

    _proto.calc = function calc(steps) {
      var newIndex = this.index_ + steps;
      var length = this.values.length;
      return this.loop_ ? (length + newIndex) % length : Math.max(0, Math.min(newIndex, length - 1));
    };

    _proto.step = function step(steps) {
      this.index_ = this.calc(steps);
      return this.values[this.index_];
    };

    _proto.current = function current() {
      return this.values[this.index_];
    };

    _proto.next = function next() {
      return this.step(1);
    };

    _proto.prev = function prev() {
      return this.step(-1);
    };

    _proto.ended = function ended() {
      return this.index_ === this.values.length - 1;
    };

    return List;
  }();

  var SettingMenuItem = video_js.getComponent("SettingMenuItem");

  var ResolutionItem =
  /*#__PURE__*/
  function (_SettingMenuItem) {
    _inheritsLoose(ResolutionItem, _SettingMenuItem);

    function ResolutionItem(player, options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _SettingMenuItem.call(this, player, {
        name: "ResolutionItem",
        label: "Resolution",
        icon: "vjs-icon-hd",
        entries: options.resolution || []
      }) || this;

      if (!_this.entries.length) {
        _this.hide();
      }

      _this.addClass("vjs-setting-resolution");

      return _this;
    }

    var _proto = ResolutionItem.prototype;

    _proto.update = function update(selectedItem) {
      _SettingMenuItem.prototype.update.call(this, selectedItem);

      this.player_.resolution.pick(selectedItem.value);
    };

    return ResolutionItem;
  }(SettingMenuItem);

  video_js.registerComponent("ResolutionItem", ResolutionItem);
  video_js.hook("setup", function (vjsPlayer) {
    var SettingMenu = vjsPlayer.findChild("SettingMenu")[0].component;
    SettingMenu.addChild(new ResolutionItem(vjsPlayer));
  });

  var Resolution =
  /*#__PURE__*/
  function (_List) {
    _inheritsLoose(Resolution, _List);

    function Resolution(player, array, startIndex) {
      var _this;

      if (startIndex === void 0) {
        startIndex = 0;
      }

      _this = _List.call(this, array, startIndex) || this;
      _this.player = player;

      _this.pick(startIndex);

      return _this;
    }

    var _proto = Resolution.prototype;

    _proto.pick = function pick(index) {
      if (typeof index !== "undefined") {
        this.index(index);
      }

      var current = this.current();
      this.player.src(current.sources);
      this.player.trigger("resolutionchange", Object.assign(current, {
        index: this.index()
      }));
    };

    return Resolution;
  }(List);

  var setResolution = function setResolution(resolution) {
    var player = this.player_;
    var ResolutionItem = player.findChild("ResolutionItem")[0].component;
    player.resolution = new Resolution(player, resolution);
    ResolutionItem.setEntries(resolution.map(function (_ref, index) {
      var label = _ref.label,
          default_ = _ref.default;
      return {
        label: label,
        value: index,
        defalut: default_
      };
    }));
    ResolutionItem.show();
    player.trigger("resolution");
  };

  video_js.registerPlugin("setResolution", setResolution);
  video_js.hook("setup", function (vjsPlayer) {
    var resolution = vjsPlayer.options_.resolution || [];

    if (resolution.length) {
      vjsPlayer.setResolution(resolution);
    }
  });

}(videojs));
