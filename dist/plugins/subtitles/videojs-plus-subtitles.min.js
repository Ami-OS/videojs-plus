/* eslint-disable */
(function (video_js) {
  'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var SettingMenuItem = video_js.getComponent("SettingMenuItem");

  var SubtitlesMenuItem =
  /*#__PURE__*/
  function (_SettingMenuItem) {
    _inheritsLoose(SubtitlesMenuItem, _SettingMenuItem);

    function SubtitlesMenuItem(player, options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _SettingMenuItem.call(this, player, {
        name: "SubtitlesMenuItem",
        label: "Subtitles",
        icon: "vjs-icon-subtitles",
        entries: options.subtitles || []
      }) || this;

      if (!_this.entries.length) {
        _this.hide();
      }

      _this.addClass("vjs-setting-subtitles");

      return _this;
    }

    var _proto = SubtitlesMenuItem.prototype;

    _proto.update = function update(selectedItem) {
      _SettingMenuItem.prototype.update.call(this, selectedItem);

      this.player_.subtitles().pick(selectedItem.value);
    };

    return SubtitlesMenuItem;
  }(SettingMenuItem);

  video_js.registerComponent("SubtitlesMenuItem", SubtitlesMenuItem);
  videojs.hook("setup", function (vjsPlayer) {
    var SettingMenu = vjsPlayer.findChild("SettingMenu")[0].component;
    SettingMenu.addChild(new SubtitlesMenuItem(vjsPlayer));
  });

  var Plugin = video_js.getPlugin("plugin");

  var subtitles =
  /*#__PURE__*/
  function (_Plugin) {
    _inheritsLoose(subtitles, _Plugin);

    function subtitles(player, options) {
      var _this;

      _this = _Plugin.call(this, player, options) || this;
      _this.flag = null;
      _this.track = null;
      var timeout;
      player.textTracks().on("change", function () {
        var _this2 = this;

        clearTimeout(timeout);
        var newFlag;
        var subtitles = [];
        var showing = this.tracks_.filter(function (track) {
          if (track.kind === "subtitles") {
            subtitles.push(track);

            if (track.mode === "showing") {
              newFlag = track.label || track.id;
              return true;
            }
          }
        })[0]; // multiple `change` event will reveiced when subtitles changed ( depends on number of subtitles or browser ? )
        // so that timeout is used to make sure `subtitlechange` event emit once;

        timeout = setTimeout(function () {
          if (_this2.flag !== newFlag) {
            _this2.flag = newFlag;
            showing = showing || {};
            player.trigger("subtitlechange", {
              index: subtitles.indexOf(showing),
              label: showing.label || ""
            });
          }
        }, 10);
      });
      return _this;
    }

    var _proto = subtitles.prototype;

    _proto.load = function load(subtitles) {
      var _this3 = this;

      if (subtitles === void 0) {
        subtitles = [];
      }

      var player = this.player;

      if (subtitles && subtitles.length) {
        this.remove();
        subtitles.forEach(function (subtitle) {
          if (_this3.flag) {
            subtitle.default = subtitle.label === _this3.flag;
          }

          var manualCleanup = true;
          var trackEl = player.addRemoteTextTrack(subtitle, manualCleanup);

          if (!_this3.flag && subtitle.default) {
            _this3.flag = subtitle.label;
            _this3.track = trackEl.track;
            trackEl.track.mode = "showing";
          }
        });
        var SubtitlesMenuItem = player.findChild("SubtitlesMenuItem")[0].component;
        SubtitlesMenuItem.setEntries(subtitles.map(function (_ref, index) {
          var label = _ref.label,
              default_ = _ref.default;
          return {
            label: label,
            value: index,
            defalut: default_
          };
        }));
        SubtitlesMenuItem.show();
        player.trigger("subtitles", subtitles);
      }
    };

    _proto.remove = function remove() {
      var tracks = this.player.textTracks().tracks_.slice(0);

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        if (track && track.kind === "subtitles") {
          this.player.removeRemoteTextTrack(track);
        }
      }
    };

    _proto.pick = function pick(index) {
      var tracks = this.player.textTracks();
      var newTrack = tracks[index];

      if (newTrack) {
        newTrack.mode = "showing";
        this.track.mode = "disabled";
        this.track = newTrack;
      }
    };

    return subtitles;
  }(Plugin);

  video_js.hook("setup", function (vjsPlayer) {
    vjsPlayer.ready(function () {
      vjsPlayer.subtitles().load(vjsPlayer.options_.subtitles);
    });
  });
  video_js.registerPlugin("subtitles", subtitles);

}(videojs));
